{"ast":null,"code":"import React, { Fragment } from 'react';\nimport { gsap as gsap$2 } from 'gsap';\nimport { isForwardRef, isFragment } from 'react-is';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o) {\n  var i = 0;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  i = o[Symbol.iterator]();\n  return i.next.bind(i);\n}\n\nvar PlayState;\n\n(function (PlayState) {\n  PlayState[\"play\"] = \"play\";\n  PlayState[\"reverse\"] = \"reverse\";\n  PlayState[\"stop\"] = \"stop\";\n  PlayState[\"pause\"] = \"pause\";\n})(PlayState || (PlayState = {}));\n\nvar setPlayState = function setPlayState(playState, prevPlayState, tween) {\n  if (tween === void 0) {\n    tween = null;\n  }\n\n  if (tween && playState && playState !== prevPlayState) {\n    if (playState === PlayState.play) {\n      if (prevPlayState === PlayState.pause || prevPlayState === PlayState.reverse) {\n        tween.play();\n      } else {\n        tween.restart(true);\n      }\n    } else if (playState === PlayState.reverse) {\n      if (prevPlayState === PlayState.pause || prevPlayState === PlayState.play) {\n        tween.reverse();\n      } else {\n        tween.reverse(0);\n      }\n    } else if (playState === PlayState.stop) {\n      tween.pause(0);\n    } else if (playState === PlayState.pause) {\n      tween.pause();\n    }\n  }\n};\n\nvar getTweenFunction = function getTweenFunction(targets, props) {\n  var _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 1 : _props$duration,\n      from = props.from,\n      to = props.to,\n      stagger = props.stagger,\n      progress = props.progress,\n      totalProgress = props.totalProgress,\n      playState = props.playState,\n      onCompleteAll = props.onCompleteAll,\n      onCompleteAllParams = props.onCompleteAllParams,\n      onCompleteAllScope = props.onCompleteAllScope,\n      onStartAll = props.onStartAll,\n      vars = _objectWithoutPropertiesLoose(props, [\"children\", \"wrapper\", \"duration\", \"from\", \"to\", \"stagger\", \"progress\", \"totalProgress\", \"playState\", \"disabled\", \"onlyInvalidateTo\", \"onCompleteAll\", \"onCompleteAllParams\", \"onCompleteAllScope\", \"onStartAll\", \"position\", \"target\"]);\n\n  var tweenFunction;\n\n  if (from && to) {\n    tweenFunction = gsap$2.fromTo(targets, from, _extends(_extends({\n      stagger: stagger,\n      duration: duration\n    }, to), vars));\n  } else if (to) {\n    tweenFunction = gsap$2.to(targets, _extends(_extends({\n      stagger: stagger,\n      duration: duration\n    }, to), vars));\n  } else {\n    tweenFunction = gsap$2.from(targets, _extends(_extends({\n      stagger: stagger,\n      duration: duration\n    }, from), vars));\n  } // if multiple tweens (stagger), wrap them in a timeline\n  // TODO: if it's already an timeline add event handlers\n\n\n  if (Array.isArray(tweenFunction)) {\n    tweenFunction.forEach(function (t) {\n      t.paused(false);\n    });\n    tweenFunction = gsap$2.timeline(_extends(_extends({}, vars), {}, {\n      tweens: tweenFunction,\n      smoothChildTiming: true,\n      onComplete: onCompleteAll,\n      onCompleteParams: onCompleteAllParams,\n      onCompleteScope: onCompleteAllScope,\n      onStart: onStartAll\n    }));\n  } // props at mount\n\n\n  if (progress) {\n    tweenFunction.progress(progress);\n  }\n\n  if (totalProgress) {\n    tweenFunction.totalProgress(totalProgress);\n  }\n\n  if (playState) {\n    setPlayState(playState, null, tweenFunction);\n  }\n\n  return tweenFunction;\n};\n\nvar isEqual = function isEqual(obj1, obj2) {\n  // very easy equal check\n  // attention: if the order of properties are different it returns false\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n};\n\nvar refOrInnerRef = function refOrInnerRef(child) {\n  if (child.type.$$typeof && child.type.$$typeof.toString() === 'Symbol(react.forward_ref)') {\n    return 'ref';\n  } // styled-components < 4\n\n\n  if (child.type.styledComponentId) {\n    return 'innerRef';\n  }\n\n  return 'ref';\n};\n\nvar nullishCoalescing = function nullishCoalescing(value, ifNullish) {\n  if (value === null || typeof value === 'undefined') {\n    return ifNullish;\n  }\n\n  return value;\n};\n\nvar Context = /*#__PURE__*/React.createContext({\n  registerConsumer: function registerConsumer() {}\n});\n\nvar Provider = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Provider, _React$Component);\n\n  function Provider(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.consumers = [];\n    _this.registerConsumer = _this.registerConsumer.bind(_assertThisInitialized(_this));\n    _this.getContextValue = _this.getContextValue.bind(_assertThisInitialized(_this));\n    _this.renderWithProvider = _this.renderWithProvider.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Provider.prototype;\n\n  _proto.registerConsumer = function registerConsumer(consumer) {\n    this.consumers.push(consumer);\n  };\n\n  _proto.getContextValue = function getContextValue() {\n    return {\n      registerConsumer: this.registerConsumer\n    };\n  };\n\n  _proto.renderWithProvider = function renderWithProvider(output) {\n    return React.createElement(Context.Provider, {\n      value: this.getContextValue()\n    }, output);\n  };\n\n  return Provider;\n}(React.Component);\n\nvar gsap;\n\nvar _interpolate;\n\nvar _getProp;\n\nvar _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== 'undefined' && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n};\n\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n\nfunction getCircleLength(el) {\n  return 2 * Math.PI * parseFloat(nullishCoalescing(el.getAttribute('r'), '1'));\n}\n\nfunction getRectLength(el) {\n  return parseFloat(nullishCoalescing(el.getAttribute('width'), '1')) * 2 + parseFloat(nullishCoalescing(el.getAttribute('height'), '1')) * 2;\n}\n\nfunction getLineLength(el) {\n  return getDistance({\n    x: parseFloat(nullishCoalescing(el.getAttribute('x1'), '1')),\n    y: parseFloat(nullishCoalescing(el.getAttribute('y1'), '1'))\n  }, {\n    x: parseFloat(nullishCoalescing(el.getAttribute('x2'), '1')),\n    y: parseFloat(nullishCoalescing(el.getAttribute('y2'), '1'))\n  });\n}\n\nfunction getPolylineLength(el) {\n  var points = el.points;\n  var totalLength = 0;\n  var previousPos = undefined;\n\n  for (var i = 0; i < points.numberOfItems; i++) {\n    var currentPos = points.getItem(i);\n    if (previousPos) totalLength += getDistance(previousPos, currentPos);\n    previousPos = currentPos;\n  }\n\n  return totalLength;\n}\n\nfunction getPolygonLength(el) {\n  var points = el.points;\n  return getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0));\n} // if path is splitted into multiple move commands then return longest path\n\n\nfunction getPathLength(el) {\n  if (!el.hasAttribute('d')) {\n    return el.getTotalLength();\n  }\n\n  var d = el.getAttribute('d');\n  var pathString = d ? d.replace(/m/gi, 'M') : null;\n\n  if (!pathString) {\n    return el.getTotalLength();\n  }\n\n  var paths = pathString.split('M').filter(function (path) {\n    return path !== '';\n  }).map(function (path) {\n    return \"M\" + path;\n  });\n\n  if (paths.length === 1) {\n    return el.getTotalLength();\n  }\n\n  var maxLength = 0;\n  paths.forEach(function (path) {\n    var pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    pathElement.setAttribute('d', path);\n    maxLength = Math.max(maxLength, pathElement.getTotalLength());\n  });\n  return maxLength;\n}\n\nfunction getTotalLength(el) {\n  if (el.getTotalLength) {\n    return getPathLength(el);\n  }\n\n  switch (el.tagName.toLowerCase()) {\n    case 'circle':\n      return getCircleLength(el);\n\n    case 'rect':\n      return getRectLength(el);\n\n    case 'line':\n      return getLineLength(el);\n\n    case 'polyline':\n      return getPolylineLength(el);\n\n    case 'polygon':\n      return getPolygonLength(el);\n\n    default:\n      return 0;\n  }\n}\n\nvar SvgDrawPlugin = {\n  version: '2.0.0',\n  name: 'svgDraw',\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n    _interpolate = gsap.utils.interpolate;\n    _getProp = gsap.getProperty;\n  },\n  init: function init(target, value, _tween, index, targets) {\n    var length = getTotalLength(target);\n    var lengthParam = value;\n    var offsetParam = 0;\n\n    if (Array.isArray(value)) {\n      lengthParam = value[0];\n\n      if (value.length >= 2) {\n        offsetParam = value[1] * -1;\n      }\n    }\n\n    var data = this;\n    data.target = target;\n    data.strokeDashoffset = _interpolate(_getProp(target, 'stroke-dashoffset'), length * offsetParam);\n    data.strokeDasharray = _interpolate(_getProp(target, 'stroke-dasharray'), [lengthParam * length, length]);\n  },\n  render: function render(progress, data) {\n    data.target.setAttribute('stroke-dashoffset', data.strokeDashoffset(progress));\n    data.target.setAttribute('stroke-dasharray', data.strokeDasharray(progress));\n  }\n};\n_getGSAP() && gsap.registerPlugin(SvgDrawPlugin);\nvar gsap$1;\n\nvar _interpolate$1;\n\nvar _format;\n\nvar _getGSAP$1 = function _getGSAP() {\n  return gsap$1 || typeof window !== 'undefined' && (gsap$1 = window.gsap) && gsap$1.registerPlugin && gsap$1;\n};\n\nvar CountPlugin = {\n  version: '1.0.0',\n  name: 'count',\n  register: function register(core, Plugin, propTween) {\n    gsap$1 = core;\n    _interpolate$1 = gsap$1.utils.interpolate;\n\n    _format = function _format(value) {\n      return parseInt(value.toString(), 10);\n    };\n  },\n  init: function init(target, value, _tween, index, targets) {\n    var inputValue = value;\n    var format = _format;\n\n    if (typeof value === 'object') {\n      inputValue = nullishCoalescing(value.value, 0);\n\n      if (value.format) {\n        format = value.format;\n      }\n    }\n\n    var initialCount = parseFloat(target.innerText);\n    var data = this;\n    data.target = target;\n    data.count = _interpolate$1(initialCount, parseFloat(inputValue.toString()));\n    data.format = format;\n  },\n  render: function render(progress, data) {\n    data.target.innerText = data.format(data.count(progress));\n  }\n};\n_getGSAP$1() && gsap$1.registerPlugin(CountPlugin);\ngsap$2.registerPlugin(SvgDrawPlugin);\ngsap$2.registerPlugin(CountPlugin);\n\nvar Tween = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tween, _React$Component);\n\n  function Tween() {\n    var _this;\n\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.targets = [];\n    return _this;\n  }\n\n  var _proto = Tween.prototype;\n\n  _proto.setPlayState = function setPlayState$1(playState) {\n    var previousPlayState = this.props.playState;\n    setPlayState(playState, previousPlayState, this.tween);\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.createTween();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.tween) {\n      this.tween.kill();\n    }\n  };\n\n  _proto.getSnapshotBeforeUpdate = function getSnapshotBeforeUpdate() {\n    this.targets = [];\n    return null;\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props = this.props,\n        children = _this$props.children,\n        duration = _this$props.duration,\n        to = _this$props.to,\n        progress = _this$props.progress,\n        totalProgress = _this$props.totalProgress,\n        playState = _this$props.playState,\n        disabled = _this$props.disabled,\n        onlyInvalidateTo = _this$props.onlyInvalidateTo,\n        vars = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"wrapper\", \"duration\", \"from\", \"to\", \"stagger\", \"progress\", \"totalProgress\", \"playState\", \"disabled\", \"onlyInvalidateTo\", \"onCompleteAll\", \"onCompleteAllParams\", \"onCompleteAllScope\", \"onStartAll\", \"position\", \"target\"]); // if children change create a new tween\n    // TODO: replace easy length check with fast equal check\n\n\n    if (React.Children.count(prevProps.children) !== React.Children.count(children)) {\n      this.createTween();\n    }\n\n    if (disabled) {\n      return;\n    } // execute function calls\n\n\n    if (progress !== prevProps.progress) {\n      this.tween.progress(progress);\n    }\n\n    if (totalProgress !== prevProps.totalProgress) {\n      this.tween.totalProgress(totalProgress);\n    }\n\n    if (duration !== prevProps.duration) {\n      this.tween.duration(duration);\n    } // if \"to\" props are changed: reinit and restart tween\n\n\n    if (!isEqual(to, prevProps.to)) {\n      // is Tween\n      if (!this.tween.getChildren) {\n        this.tween.vars = _extends(_extends({}, to), vars);\n\n        if (onlyInvalidateTo) {\n          var progressTmp = this.tween.progress();\n          this.tween.progress(0).invalidate().progress(progressTmp);\n        } else {\n          this.tween.invalidate();\n        }\n      } // is Timeline\n      // TODO: not yet ready\n      else {\n          var delay = 0;\n          this.tween.getChildren(false, true, false).forEach(function (tween) {\n            tween.vars = _extends(_extends(_extends({}, to), vars), {\n              delay: delay\n            });\n            tween.invalidate(); // delay += stagger || 0;\n          });\n        }\n\n      if (!this.tween.paused()) {\n        this.tween.restart();\n      }\n    }\n\n    setPlayState(playState, prevProps.playState, this.tween);\n  };\n\n  _proto.createTween = function createTween() {\n    if (this.tween) {\n      this.tween.kill();\n    }\n\n    if (this.props.children) {\n      this.tween = getTweenFunction(this.targets, this.props);\n    } else {\n      // why this is needed?\n      this.tween = function () {};\n    }\n\n    this.context.registerConsumer(this);\n  };\n\n  _proto.getGSAP = function getGSAP() {\n    return this.tween;\n  };\n\n  _proto.setGSAP = function setGSAP(tween) {\n    this.tween = tween;\n  };\n\n  _proto.addTarget = function addTarget(target) {\n    // target is null at unmount\n    if (target !== null) {\n      this.targets.push(target);\n    }\n  };\n\n  _proto.getTargets = function getTargets() {\n    return this.targets;\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        wrapper = _this$props2.wrapper;\n    var output = React.createElement(Fragment, null, React.Children.map(children, function (child) {\n      var _React$cloneElement;\n\n      return React.cloneElement(child, (_React$cloneElement = {}, _React$cloneElement[refOrInnerRef(child)] = function (target) {\n        return _this2.addTarget(target);\n      }, _React$cloneElement));\n    }));\n\n    if (wrapper) {\n      return React.cloneElement(wrapper, [], output);\n    }\n\n    return output;\n  };\n\n  return Tween;\n}(React.Component);\n\nTween.displayName = 'Tween';\nTween.contextType = Context;\n\nvar Timeline = /*#__PURE__*/function (_Provider) {\n  _inheritsLoose(Timeline, _Provider);\n\n  function Timeline(props) {\n    var _this;\n\n    _this = _Provider.call(this, props) || this;\n    _this.targets = new Map();\n    _this.setTarget = _this.setTarget.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Timeline.prototype;\n\n  _proto.setPlayState = function setPlayState$1(playState) {\n    var previousPlayState = this.props.playState;\n    setPlayState(playState, previousPlayState, this.timeline);\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.createTimeline();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.timeline.kill();\n  };\n\n  _proto.getSnapshotBeforeUpdate = function getSnapshotBeforeUpdate() {\n    this.targets = new Map();\n    return null;\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props = this.props,\n        children = _this$props.children,\n        duration = _this$props.duration,\n        progress = _this$props.progress,\n        totalProgress = _this$props.totalProgress,\n        playState = _this$props.playState; // if children change create a new timeline\n    // TODO: replace easy length check with fast equal check\n    // TODO: same for props.target?\n\n    if (React.Children.count(prevProps.children) !== React.Children.count(children)) {\n      this.createTimeline();\n    } // execute function calls\n\n\n    if (progress !== prevProps.progress) {\n      this.timeline.progress(progress);\n    }\n\n    if (totalProgress !== prevProps.totalProgress) {\n      this.timeline.totalProgress(totalProgress);\n    }\n\n    if (duration !== prevProps.duration) {\n      this.timeline.duration(duration);\n    }\n\n    setPlayState(playState, prevProps.playState, this.timeline);\n  };\n\n  _proto.createTimeline = function createTimeline() {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        duration = _this$props2.duration,\n        progress = _this$props2.progress,\n        totalProgress = _this$props2.totalProgress,\n        playState = _this$props2.playState,\n        labels = _this$props2.labels,\n        vars = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"target\", \"duration\", \"progress\", \"totalProgress\", \"playState\", \"labels\", \"position\"]);\n\n    if (this.timeline) {\n      this.timeline.kill();\n    } // init timeline\n\n\n    this.timeline = gsap$2.timeline(_extends({\n      smoothChildTiming: true\n    }, vars));\n\n    if (labels) {\n      labels.forEach(function (label) {\n        _this2.timeline.addLabel(label.label, label.position);\n      });\n    } // add tweens or nested timelines to timeline\n\n\n    this.consumers.forEach(function (consumer) {\n      if (consumer.tween && !consumer.props.children) {\n        var _consumer$props = consumer.props,\n            _position = _consumer$props.position,\n            _target = _consumer$props.target,\n            stagger = _consumer$props.stagger,\n            _vars = _objectWithoutPropertiesLoose(_consumer$props, [\"position\", \"target\", \"stagger\"]); // get target if not nullish\n\n\n        var targets = null;\n\n        if (_target !== null && typeof _target !== 'undefined') {\n          targets = _this2.targets.get(_target);\n        }\n\n        var tween = getTweenFunction( // @ts-ignore\n        nullishCoalescing(targets, Array.from(_this2.targets.values())), _extends({\n          stagger: stagger\n        }, _vars));\n\n        _this2.timeline.add(tween, nullishCoalescing(_position, '+=0'));\n\n        consumer.setGSAP(tween);\n      } else {\n        var _position2 = consumer.props.position;\n\n        _this2.timeline.add(consumer.getGSAP(), nullishCoalescing(_position2, '+=0'));\n      }\n    }); // props at mount\n\n    if (duration) {\n      this.timeline.duration(duration);\n    }\n\n    if (progress) {\n      this.timeline.progress(progress);\n    }\n\n    if (totalProgress) {\n      this.timeline.totalProgress(totalProgress);\n    }\n\n    if (playState) {\n      this.setPlayState(playState);\n    }\n\n    this.context.registerConsumer(this);\n  };\n\n  _proto.getGSAP = function getGSAP() {\n    return this.timeline;\n  };\n\n  _proto.addTarget = function addTarget(target) {\n    if (target !== null) {\n      this.targets.set(this.targets.size, target);\n    }\n  };\n\n  _proto.setTarget = function setTarget(key, target) {\n    if (target !== null) {\n      if (this.targets.has(key)) {\n        var targets = this.targets.get(key);\n\n        if (Array.isArray(targets)) {\n          this.targets.set(key, [].concat(targets, target));\n          return;\n        }\n      }\n\n      this.targets.set(key, target);\n    }\n  };\n\n  _proto.setTargets = function setTargets(targets) {\n    this.targets = targets;\n  };\n\n  _proto.getTargets = function getTargets() {\n    return this.targets;\n  };\n\n  _proto.cloneElement = function cloneElement(child) {\n    var _this3 = this,\n        _React$cloneElement;\n\n    return React.cloneElement(child, (_React$cloneElement = {}, _React$cloneElement[refOrInnerRef(child)] = function (target) {\n      return _this3.addTarget(target);\n    }, _React$cloneElement));\n  };\n\n  _proto.renderTarget = function renderTarget(target) {\n    var _this4 = this;\n\n    if (!target) {\n      return null;\n    } // if is forwardRef clone and pass targets as ref\n\n\n    if (isForwardRef(target)) {\n      return React.createElement(target.type, {\n        ref: {\n          set: this.setTarget\n        }\n      });\n    } // else iterate the first level of children and set targets\n\n\n    return React.createElement(Fragment, null, React.Children.map(target, function (child) {\n      if (isFragment(child)) {\n        return React.Children.map(child.props.children, function (fragmentChild) {\n          return _this4.cloneElement(fragmentChild);\n        });\n      }\n\n      return _this4.cloneElement(child);\n    }));\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        target = _this$props3.target,\n        children = _this$props3.children,\n        wrapper = _this$props3.wrapper;\n    var renderedTarget = this.renderTarget(target);\n    var output = React.createElement(Fragment, null, renderedTarget, children);\n\n    if (wrapper) {\n      output = React.cloneElement(wrapper, [], output);\n    }\n\n    return this.renderWithProvider(output);\n  };\n\n  return Timeline;\n}(Provider);\n\nTimeline.displayName = 'Timeline';\nTimeline.contextType = Context;\nvar EntryState;\n\n(function (EntryState) {\n  EntryState[EntryState[\"unknown\"] = 0] = \"unknown\";\n  EntryState[EntryState[\"entered\"] = 1] = \"entered\";\n  EntryState[EntryState[\"exited\"] = 2] = \"exited\";\n})(EntryState || (EntryState = {}));\n\nvar Reveal = /*#__PURE__*/function (_Provider) {\n  _inheritsLoose(Reveal, _Provider);\n\n  function Reveal() {\n    var _this;\n\n    _this = _Provider.apply(this, arguments) || this;\n    _this.triggerRef = null;\n    _this.observer = null;\n\n    _this.intersectionObserverCallback = function (entries) {\n      var _this$props = _this.props,\n          repeat = _this$props.repeat,\n          threshold = _this$props.threshold;\n      var state = EntryState.unknown;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {\n        var entry = _step.value;\n\n        if (entry.isIntersecting && entry.intersectionRatio >= threshold) {\n          _this.timeline.play();\n\n          state = EntryState.entered;\n          break;\n        } else if (!entry.isIntersecting) {\n          state = EntryState.exited;\n          break;\n        }\n      }\n\n      if (!repeat && state === EntryState.entered) {\n        _this.killIntersectionObserver();\n      } else if (repeat && state === EntryState.exited) {\n        _this.timeline.pause(0);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = Reveal.prototype;\n\n  _proto.init = function init() {\n    this.createTimeline();\n    this.createIntersectionObserver();\n  };\n\n  _proto.kill = function kill() {\n    this.killTimeline();\n    this.killIntersectionObserver();\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.init();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.kill();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        trigger = _this$props2.trigger; // if children change create a new timeline\n    // TODO: replace easy length check with fast equal check\n    // TODO: same for props.target?\n\n    if (React.Children.count(prevProps.children) !== React.Children.count(children)) {\n      this.init();\n    }\n\n    if (prevProps.trigger !== trigger) {\n      this.init();\n    }\n  };\n\n  _proto.createTimeline = function createTimeline() {\n    var _this2 = this;\n\n    this.killTimeline(); // init timeline\n\n    this.timeline = gsap$2.timeline({\n      smoothChildTiming: true,\n      paused: true\n    }); // add consumers\n\n    this.consumers.forEach(function (consumer) {\n      var position = consumer.props.position;\n\n      _this2.timeline.add(consumer.getGSAP().play(), nullishCoalescing(position, 0));\n    });\n  };\n\n  _proto.killTimeline = function killTimeline() {\n    if (this.timeline) {\n      this.timeline.kill();\n    }\n  };\n\n  _proto.createIntersectionObserver = function createIntersectionObserver() {\n    var _this3 = this;\n\n    var _this$props3 = this.props,\n        root = _this$props3.root,\n        rootMargin = _this$props3.rootMargin,\n        threshold = _this$props3.threshold;\n    var options = {\n      root: root,\n      rootMargin: rootMargin,\n      threshold: [0, threshold]\n    };\n    this.observer = new IntersectionObserver(this.intersectionObserverCallback, options); // It would be better if we wouldn't need an extra wrapper.\n    // But it can be problematic for example with a fadeInLeft animation\n    // were the element is out of the viewport in the initial state.\n    // In this case there wouldn't be an intersection..\n\n    if (!this.triggerRef) {\n      this.consumers.forEach(function (consumer) {\n        consumer.getTargets().forEach(function (target) {\n          _this3.observer && _this3.observer.observe(target);\n        });\n      });\n    } else {\n      this.observer && this.observer.observe(this.triggerRef);\n    }\n  };\n\n  _proto.killIntersectionObserver = function killIntersectionObserver() {\n    this.unobserveAll();\n    this.observer = null;\n  };\n\n  _proto.unobserveAll = function unobserveAll() {\n    var _this4 = this;\n\n    if (this.observer) {\n      if (!this.triggerRef) {\n        this.consumers.forEach(function (consumer) {\n          consumer.getTargets().forEach(function (target) {\n            _this4.observer && _this4.observer.unobserve(target);\n          });\n        });\n      } else {\n        this.observer && this.observer.unobserve(this.triggerRef);\n      }\n    }\n  };\n\n  _proto.getGSAP = function getGSAP() {\n    return this.timeline;\n  };\n\n  _proto.render = function render() {\n    var _this5 = this;\n\n    var _this$props4 = this.props,\n        children = _this$props4.children,\n        trigger = _this$props4.trigger;\n    var output = trigger ? React.createElement(trigger.type, Object.assign({}, trigger.props, {\n      ref: function ref(trigger) {\n        return _this5.triggerRef = trigger;\n      }\n    }), children) : children;\n    return this.renderWithProvider(output);\n  };\n\n  return Reveal;\n}(Provider);\n\nReveal.displayName = 'Reveal';\nReveal.defaultProps = {\n  trigger: null,\n  repeat: false,\n  root: null,\n  rootMargin: '0px',\n  threshold: 0.66\n};\n\nvar escapeRegExp = function escapeRegExp(regExp) {\n  var specialChars = ['$', '^', '*', '(', ')', '+', '[', ']', '{', '}', '\\\\', '|', '.', '?', '/'];\n  var regex = new RegExp('(\\\\' + specialChars.join('|\\\\') + ')', 'g');\n  return regExp.replace(regex, '\\\\$1');\n};\n\nvar SplitWords = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      wrapper = _ref.wrapper,\n      _ref$delimiter = _ref.delimiter,\n      delimiter = _ref$delimiter === void 0 ? ' ' : _ref$delimiter;\n\n  if (typeof children !== 'string') {\n    throw new Error('SplitWords only accepts a string as child.');\n  }\n\n  var words = children.split(new RegExp(\"(\" + escapeRegExp(delimiter) + \")\", 'g'));\n  return React.createElement(React.Fragment, null, words.map(function (word, i) {\n    if (delimiter === ' ' && word === delimiter) {\n      return React.createElement(React.Fragment, {\n        key: i\n      }, \" \");\n    }\n\n    return React.cloneElement(wrapper, {\n      ref: ref,\n      key: i\n    }, word);\n  }));\n});\nvar SplitChars = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n      wrapper = _ref2.wrapper;\n\n  if (typeof children !== 'string') {\n    throw new Error('SplitLetters only accepts a string as child.');\n  }\n\n  return React.createElement(React.Fragment, null, children.split(/(?=(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))/).map(function (_char, i) {\n    // TODO: enhance check for space\n    if (_char === ' ') {\n      return React.createElement(React.Fragment, {\n        key: i\n      }, \" \");\n    }\n\n    return React.cloneElement(wrapper, {\n      ref: ref,\n      key: i\n    }, _char);\n  }));\n});\nvar SplitLetters = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  console.log('Deprecation warning: Use SplitChars instead of SplitLetters');\n  return React.createElement(SplitChars, Object.assign({}, props, {\n    ref: ref\n  }));\n});\n\nvar Controls = /*#__PURE__*/function (_Provider) {\n  _inheritsLoose(Controls, _Provider);\n\n  function Controls() {\n    var _this;\n\n    _this = _Provider.apply(this, arguments) || this;\n    _this.sliderTouched = false;\n    _this.state = {\n      totalProgress: 0,\n      playState: undefined,\n      prevPlayState: undefined\n    };\n    _this.containerStyle = {\n      backgroundColor: '#f0f0f0',\n      padding: '10px 10px 0 10px',\n      marginTop: '10px',\n      position: 'relative',\n      zIndex: 2,\n      fontFamily: 'verdana, sans-serif',\n      fontSize: '16px',\n      border: '1px solid #ccc'\n    };\n    _this.buttonContainerStyle = {\n      margin: '0',\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between'\n    };\n    _this.buttonStyle = {\n      border: '1px solid #999',\n      backgroundColor: '#f0f0f0',\n      padding: '5px',\n      margin: '10px 10px 10px 0',\n      cursor: 'pointer'\n    };\n    _this.sliderStyle = {\n      margin: '0',\n      width: '100%'\n    };\n    _this.playStateStyle = {\n      color: '#999',\n      margin: '10px 0',\n      fontSize: '14px'\n    };\n\n    _this.onUpdate = function () {\n      if (_this.gsap && _this.slider && !_this.sliderTouched) {\n        var totalProgress = _this.gsap.getGSAP().totalProgress();\n\n        _this.slider.value = totalProgress * 100;\n      }\n    };\n\n    _this.onChange = function (event) {\n      if (_this.gsap && _this.gsap.getGSAP()) {\n        _this.gsap.getGSAP().totalProgress(event.target.value / 100);\n      }\n    };\n\n    _this.setPlayState = function (state) {\n      _this.setState(function (prevState) {\n        return {\n          playState: state,\n          prevPlayState: prevState.playState\n        };\n      });\n    };\n\n    _this.getControls = function (_totalProgress, playState) {\n      return React.createElement(\"div\", {\n        style: _this.containerStyle\n      }, React.createElement(\"input\", {\n        ref: function ref(el) {\n          return _this.slider = el;\n        },\n        type: \"range\",\n        style: _this.sliderStyle,\n        step: \"0.001\",\n        onChange: function onChange(e) {\n          return _this.onChange(e);\n        },\n        onMouseDown: function onMouseDown() {\n          return _this.sliderTouched = true;\n        },\n        onMouseUp: function onMouseUp() {\n          return _this.sliderTouched = false;\n        }\n      }), React.createElement(\"div\", {\n        style: _this.buttonContainerStyle\n      }, React.createElement(\"div\", null, React.createElement(\"button\", {\n        type: \"button\",\n        style: _this.buttonStyle,\n        onClick: function onClick() {\n          return _this.setPlayState(PlayState.play);\n        }\n      }, \"Play\"), React.createElement(\"button\", {\n        type: \"button\",\n        style: _this.buttonStyle,\n        onClick: function onClick() {\n          return _this.setPlayState(PlayState.reverse);\n        }\n      }, \"Reverse\"), React.createElement(\"button\", {\n        type: \"button\",\n        style: _this.buttonStyle,\n        onClick: function onClick() {\n          return _this.setPlayState(PlayState.pause);\n        }\n      }, \"Pause\"), React.createElement(\"button\", {\n        type: \"button\",\n        style: _this.buttonStyle,\n        onClick: function onClick() {\n          return _this.setPlayState(PlayState.stop);\n        }\n      }, \"Stop\")), React.createElement(\"span\", {\n        style: _this.playStateStyle\n      }, playState)));\n    };\n\n    return _this;\n  }\n\n  var _proto = Controls.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.consumers.length) {\n      this.gsap = this.consumers[0];\n      var gsap = this.gsap.getGSAP();\n\n      if (gsap) {\n        gsap.eventCallback('onUpdate', this.onUpdate);\n\n        if (this.props.playState) {\n          this.setPlayState(this.props.playState);\n        } else {\n          // get child initial state\n          if (gsap.paused()) {\n            this.setPlayState(PlayState.pause);\n          } else if (gsap.reversed()) {\n            this.setPlayState(PlayState.reverse);\n          } else {\n            this.setPlayState(PlayState.play);\n          }\n        }\n\n        var totalProgress = gsap.totalProgress();\n        this.slider.value = totalProgress * 100;\n      }\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this.onUpdate();\n  };\n\n  _proto.render = function render() {\n    var children = this.props.children;\n    var _this$state = this.state,\n        totalProgress = _this$state.totalProgress,\n        playState = _this$state.playState,\n        prevPlayState = _this$state.prevPlayState;\n\n    if (this.gsap) {\n      setPlayState(playState, prevPlayState, this.gsap.getGSAP());\n    }\n\n    return this.renderWithProvider(React.createElement(\"div\", null, children, this.getControls(totalProgress, playState)));\n  };\n\n  return Controls;\n}(Provider);\n\nexport { Controls, PlayState, Reveal, SplitChars, SplitLetters, SplitWords, Timeline, Tween };","map":{"version":3,"sources":["../src/types.ts","../src/helper.ts","../src/Provider.tsx","../src/plugins/PlugInSvgDraw.ts","../src/plugins/PlugInCount.ts","../src/Tween.tsx","../src/Timeline.tsx","../src/tools/Reveal.tsx","../src/tools/SplitText.tsx","../src/tools/Controls.tsx"],"names":["PlayState","setPlayState","tween","playState","prevPlayState","getTweenFunction","duration","from","to","stagger","progress","totalProgress","onCompleteAll","onCompleteAllParams","onCompleteAllScope","onStartAll","vars","props","tweenFunction","Array","t","tweens","smoothChildTiming","onComplete","onCompleteParams","onCompleteScope","onStart","isEqual","JSON","refOrInnerRef","child","nullishCoalescing","value","Context","registerConsumer","Provider","React","Component","getContextValue","renderWithProvider","_getGSAP","gsap","window","Math","p2","p1","parseFloat","el","getDistance","x","y","points","totalLength","previousPos","i","currentPos","getPolylineLength","d","pathString","paths","path","maxLength","pathElement","document","getPathLength","getCircleLength","getRectLength","getLineLength","getPolygonLength","SvgDrawPlugin","version","name","register","_interpolate","_getProp","init","length","getTotalLength","lengthParam","offsetParam","data","render","CountPlugin","_format","parseInt","inputValue","format","initialCount","target","Tween","previousPlayState","componentDidMount","componentWillUnmount","getSnapshotBeforeUpdate","componentDidUpdate","children","disabled","onlyInvalidateTo","prevProps","progressTmp","delay","createTween","getGSAP","setGSAP","addTarget","getTargets","wrapper","output","Timeline","createTimeline","labels","label","consumer","position","targets","setTarget","setTargets","cloneElement","renderTarget","isForwardRef","ref","set","isFragment","renderedTarget","EntryState","Reveal","trigger","repeat","root","rootMargin","threshold","kill","paused","killTimeline","createIntersectionObserver","options","killIntersectionObserver","unobserveAll","state","entry","escapeRegExp","specialChars","regex","regExp","SplitWords","delimiter","words","word","key","SplitChars","char","SplitLetters","console","Controls","undefined","backgroundColor","padding","marginTop","zIndex","fontFamily","fontSize","border","margin","display","flexWrap","justifyContent","cursor","width","color","event","prevState","style","containerStyle","type","sliderStyle","step","onChange","onMouseDown","onMouseUp","buttonContainerStyle","buttonStyle","onClick","playStateStyle"],"mappings":"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","sourcesContent":["export enum PlayState {\n  play = 'play',\n  reverse = 'reverse',\n  stop = 'stop',\n  pause = 'pause',\n}\n","import { gsap } from 'gsap';\nimport { PlayState } from './types';\n\nconst setPlayState = (\n  playState?: PlayState,\n  prevPlayState?: PlayState | null,\n  tween: any = null\n) => {\n  if (tween && playState && playState !== prevPlayState) {\n    if (playState === PlayState.play) {\n      if (prevPlayState === PlayState.pause || prevPlayState === PlayState.reverse) {\n        tween.play();\n      } else {\n        tween.restart(true);\n      }\n    } else if (playState === PlayState.reverse) {\n      if (prevPlayState === PlayState.pause || prevPlayState === PlayState.play) {\n        tween.reverse();\n      } else {\n        tween.reverse(0);\n      }\n    } else if (playState === PlayState.stop) {\n      tween.pause(0);\n    } else if (playState === PlayState.pause) {\n      tween.pause();\n    }\n  }\n};\n\nconst getTweenFunction = (targets: any, props: any): gsap.core.Tween | gsap.core.Timeline => {\n  const {\n    children,\n    wrapper,\n\n    duration = 1,\n    from,\n    to,\n\n    stagger,\n\n    progress,\n    totalProgress,\n    playState,\n    disabled,\n    onlyInvalidateTo,\n\n    onCompleteAll,\n    onCompleteAllParams,\n    onCompleteAllScope,\n    onStartAll,\n\n    position,\n    target,\n\n    ...vars\n  } = props;\n\n  let tweenFunction: gsap.core.Tween | gsap.core.Timeline;\n\n  if (from && to) {\n    tweenFunction = gsap.fromTo(targets, from, { stagger, duration, ...to, ...vars });\n  } else if (to) {\n    tweenFunction = gsap.to(targets, { stagger, duration, ...to, ...vars });\n  } else {\n    tweenFunction = gsap.from(targets, { stagger, duration, ...from, ...vars });\n  }\n\n  // if multiple tweens (stagger), wrap them in a timeline\n  // TODO: if it's already an timeline add event handlers\n  if (Array.isArray(tweenFunction)) {\n    tweenFunction.forEach(t => {\n      t.paused(false);\n    });\n    tweenFunction = gsap.timeline({\n      ...vars,\n      tweens: tweenFunction,\n      smoothChildTiming: true,\n      onComplete: onCompleteAll,\n      onCompleteParams: onCompleteAllParams,\n      onCompleteScope: onCompleteAllScope,\n      onStart: onStartAll,\n    });\n  }\n\n  // props at mount\n  if (progress) {\n    tweenFunction.progress(progress);\n  }\n  if (totalProgress) {\n    tweenFunction.totalProgress(totalProgress);\n  }\n  if (playState) {\n    setPlayState(playState, null, tweenFunction);\n  }\n\n  return tweenFunction;\n};\n\nconst callTweenFunction = (\n  tweenFunction: any,\n  functionName: string,\n  params: Array<any> | undefined = undefined,\n  returnFunction: string | undefined = undefined\n): void => {\n  if (Array.isArray(tweenFunction)) {\n    tweenFunction.forEach(tween => {\n      if (!params && returnFunction) {\n        params = [tween[returnFunction].apply(tween)];\n      }\n      tween[functionName].apply(tween, params);\n    });\n  } else {\n    if (!params && returnFunction) {\n      params = [tweenFunction[returnFunction].apply(tweenFunction)];\n    }\n    tweenFunction[functionName].apply(tweenFunction, params);\n  }\n};\n\nconst isEqual = (obj1: any, obj2: any) => {\n  // very easy equal check\n  // attention: if the order of properties are different it returns false\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n};\n\nconst refOrInnerRef = (child: any) => {\n  if (child.type.$$typeof && child.type.$$typeof.toString() === 'Symbol(react.forward_ref)') {\n    return 'ref';\n  }\n\n  // styled-components < 4\n  if (child.type.styledComponentId) {\n    return 'innerRef';\n  }\n\n  return 'ref';\n};\n\nconst nullishCoalescing = <T, R>(value: T, ifNullish: R): T | R => {\n  if (value === null || typeof value === 'undefined') {\n    return ifNullish;\n  }\n  return value;\n};\n\nexport {\n  getTweenFunction,\n  callTweenFunction,\n  setPlayState,\n  isEqual,\n  refOrInnerRef,\n  nullishCoalescing,\n};\n","import React from 'react';\n\nexport type ContextProps = {\n  registerConsumer: (consumer: any) => void;\n};\n\nexport const Context = React.createContext<ContextProps>({ registerConsumer: () => {} });\n\nabstract class Provider<T, S = {}> extends React.Component<T, S> {\n  consumers: any[];\n\n  constructor(props: T) {\n    super(props);\n    this.consumers = [];\n\n    this.registerConsumer = this.registerConsumer.bind(this);\n    this.getContextValue = this.getContextValue.bind(this);\n    this.renderWithProvider = this.renderWithProvider.bind(this);\n  }\n\n  registerConsumer(consumer: any) {\n    this.consumers.push(consumer);\n  }\n\n  getContextValue() {\n    return {\n      registerConsumer: this.registerConsumer,\n    };\n  }\n\n  renderWithProvider(output: any) {\n    return <Context.Provider value={this.getContextValue()}>{output}</Context.Provider>;\n  }\n}\n\nexport default Provider;\n","import { nullishCoalescing } from '../helper';\n\nlet gsap: any;\nlet _interpolate: any;\nlet _getProp: any;\nconst _getGSAP = () =>\n  gsap || (typeof window !== 'undefined' && (gsap = window.gsap) && gsap.registerPlugin && gsap);\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\nfunction getDistance(p1: DOMPoint | Point, p2: DOMPoint | Point) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n\nfunction getCircleLength(el: SVGCircleElement) {\n  return 2 * Math.PI * parseFloat(nullishCoalescing(el.getAttribute('r'), '1'));\n}\n\nfunction getRectLength(el: SVGRectElement) {\n  return (\n    parseFloat(nullishCoalescing(el.getAttribute('width'), '1')) * 2 +\n    parseFloat(nullishCoalescing(el.getAttribute('height'), '1')) * 2\n  );\n}\n\nfunction getLineLength(el: SVGLineElement) {\n  return getDistance(\n    {\n      x: parseFloat(nullishCoalescing(el.getAttribute('x1'), '1')),\n      y: parseFloat(nullishCoalescing(el.getAttribute('y1'), '1')),\n    },\n    {\n      x: parseFloat(nullishCoalescing(el.getAttribute('x2'), '1')),\n      y: parseFloat(nullishCoalescing(el.getAttribute('y2'), '1')),\n    }\n  );\n}\n\nfunction getPolylineLength(el: SVGPolylineElement) {\n  const points = el.points;\n  let totalLength = 0;\n  let previousPos: DOMPoint | undefined = undefined;\n  for (let i = 0; i < points.numberOfItems; i++) {\n    const currentPos = points.getItem(i);\n    if (previousPos) totalLength += getDistance(previousPos, currentPos);\n    previousPos = currentPos;\n  }\n  return totalLength;\n}\n\nfunction getPolygonLength(el: SVGPolylineElement) {\n  const points = el.points;\n  return (\n    getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0))\n  );\n}\n\n// if path is splitted into multiple move commands then return longest path\nfunction getPathLength(el: SVGPathElement) {\n  if (!el.hasAttribute('d')) {\n    return el.getTotalLength();\n  }\n  const d = el.getAttribute('d');\n  const pathString = d ? d.replace(/m/gi, 'M') : null;\n\n  if (!pathString) {\n    return el.getTotalLength();\n  }\n\n  const paths = pathString\n    .split('M')\n    .filter(path => path !== '')\n    .map(path => `M${path}`);\n\n  if (paths.length === 1) {\n    return el.getTotalLength();\n  }\n\n  let maxLength = 0;\n\n  paths.forEach(path => {\n    const pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    pathElement.setAttribute('d', path);\n    maxLength = Math.max(maxLength, pathElement.getTotalLength());\n  });\n\n  return maxLength;\n}\n\nfunction getTotalLength(el: any) {\n  if (el.getTotalLength) {\n    return getPathLength(el);\n  }\n  switch (el.tagName.toLowerCase()) {\n    case 'circle':\n      return getCircleLength(el);\n    case 'rect':\n      return getRectLength(el);\n    case 'line':\n      return getLineLength(el);\n    case 'polyline':\n      return getPolylineLength(el);\n    case 'polygon':\n      return getPolygonLength(el);\n    default:\n      return 0;\n  }\n}\n\nexport const SvgDrawPlugin = {\n  version: '2.0.0',\n  name: 'svgDraw',\n  register(core: any, Plugin: any, propTween: any) {\n    gsap = core;\n    _interpolate = gsap.utils.interpolate;\n    _getProp = gsap.getProperty;\n  },\n  init(target: any, value: number, _tween: any, index: number, targets: any) {\n    const length = getTotalLength(target);\n\n    let lengthParam = value;\n    let offsetParam = 0;\n\n    if (Array.isArray(value)) {\n      lengthParam = value[0];\n      if (value.length >= 2) {\n        offsetParam = value[1] * -1;\n      }\n    }\n\n    let data = this;\n    data.target = target;\n    data.strokeDashoffset = _interpolate(\n      _getProp(target, 'stroke-dashoffset'),\n      length * offsetParam\n    );\n    data.strokeDasharray = _interpolate(_getProp(target, 'stroke-dasharray'), [\n      lengthParam * length,\n      length,\n    ]);\n  },\n  render(progress: number, data: any) {\n    data.target.setAttribute('stroke-dashoffset', data.strokeDashoffset(progress));\n    data.target.setAttribute('stroke-dasharray', data.strokeDasharray(progress));\n  },\n};\n\n_getGSAP() && gsap.registerPlugin(SvgDrawPlugin);\n\nexport { SvgDrawPlugin as default };\n","import { nullishCoalescing } from '../helper';\n\nlet gsap: any;\nlet _interpolate: any;\nlet _format: any;\nconst _getGSAP = () =>\n  gsap || (typeof window !== 'undefined' && (gsap = window.gsap) && gsap.registerPlugin && gsap);\n\ntype Prop =\n  | {\n      value: string | number;\n      format: () => (value: string | number) => number | string;\n    }\n  | number\n  | string;\n\nexport const CountPlugin = {\n  version: '1.0.0',\n  name: 'count',\n  register(core: any, Plugin: any, propTween: any) {\n    gsap = core;\n    _interpolate = gsap.utils.interpolate;\n    _format = (value: string | number) => parseInt(value.toString(), 10);\n  },\n  init(target: any, value: Prop, _tween: any, index: number, targets: any) {\n    let inputValue = value;\n    let format = _format;\n    if (typeof value === 'object') {\n      inputValue = nullishCoalescing(value.value, 0);\n      if (value.format) {\n        format = value.format;\n      }\n    }\n\n    const initialCount = parseFloat(target.innerText);\n\n    let data = this;\n    data.target = target;\n    data.count = _interpolate(initialCount, parseFloat(inputValue.toString()));\n    data.format = format;\n  },\n  render(progress: number, data: any) {\n    data.target.innerText = data.format(data.count(progress));\n  },\n};\n\n_getGSAP() && gsap.registerPlugin(CountPlugin);\n\nexport { CountPlugin as default };\n","import React, { Fragment } from 'react';\nimport { gsap } from 'gsap';\nimport { PlayState } from './types';\nimport { getTweenFunction, setPlayState, isEqual, refOrInnerRef } from './helper';\nimport { Context } from './Provider';\n\n// import { CSSPlugin } from 'gsap/dist/CSSPlugin'; // CSSPlugin not exported as ES5?\nimport SvgDrawPlugin from './plugins/PlugInSvgDraw';\nimport CountPlugin from './plugins/PlugInCount';\n\n// gsap.registerPlugin(CSSPlugin);\ngsap.registerPlugin(SvgDrawPlugin);\ngsap.registerPlugin(CountPlugin);\n\ntype StaggerFunction = (index: number, target: any, list: any) => number;\ntype StaggerFromValues = 'start' | 'center' | 'edges' | 'random' | 'end';\ntype EaseFunction = (value: number) => number;\n\nexport type Stagger =\n  | {\n      amount?: number;\n      each?: number;\n      from?: StaggerFromValues | number | [number, number];\n      grid?: [number, number] | 'auto';\n      axis?: 'x' | 'y';\n      ease?: string | EaseFunction;\n      repeat?: number;\n      yoyo?: boolean;\n      [prop: string]: any;\n    }\n  | number\n  | StaggerFunction;\n\nexport type TweenProps = {\n  /** One or multiple \"refable\" components  */\n  children?: React.ReactNode;\n  wrapper?: React.ReactElement;\n  target?: number | string;\n  position?: string | number;\n\n  from?: any;\n  to?: any;\n  stagger?: Stagger;\n\n  duration?: number;\n  progress?: number;\n  totalProgress?: number;\n  playState?: PlayState;\n\n  disabled?: boolean;\n  onlyInvalidateTo?: boolean;\n\n  [prop: string]: any;\n};\n\nclass Tween extends React.Component<TweenProps, {}> {\n  static displayName = 'Tween';\n  static contextType = Context;\n\n  tween: any;\n  targets: any[] = [];\n\n  setPlayState(playState: PlayState) {\n    const { playState: previousPlayState } = this.props;\n    setPlayState(playState, previousPlayState, this.tween);\n  }\n\n  componentDidMount() {\n    this.createTween();\n  }\n\n  componentWillUnmount() {\n    if (this.tween) {\n      this.tween.kill();\n    }\n  }\n\n  getSnapshotBeforeUpdate() {\n    this.targets = [];\n    return null;\n  }\n\n  componentDidUpdate(prevProps: TweenProps) {\n    const {\n      children,\n      wrapper,\n\n      duration,\n      from,\n      to,\n      stagger,\n\n      progress,\n      totalProgress,\n      playState,\n      disabled,\n      onlyInvalidateTo,\n\n      onCompleteAll,\n      onCompleteAllParams,\n      onCompleteAllScope,\n      onStartAll,\n\n      position,\n      target,\n\n      ...vars\n    } = this.props;\n\n    // if children change create a new tween\n    // TODO: replace easy length check with fast equal check\n    if (React.Children.count(prevProps.children) !== React.Children.count(children)) {\n      this.createTween();\n    }\n\n    if (disabled) {\n      return;\n    }\n\n    // execute function calls\n    if (progress !== prevProps.progress) {\n      this.tween.progress(progress);\n    }\n    if (totalProgress !== prevProps.totalProgress) {\n      this.tween.totalProgress(totalProgress);\n    }\n    if (duration !== prevProps.duration) {\n      this.tween.duration(duration);\n    }\n    // if \"to\" props are changed: reinit and restart tween\n    if (!isEqual(to, prevProps.to)) {\n      // is Tween\n      if (!this.tween.getChildren) {\n        this.tween.vars = { ...to, ...vars };\n\n        if (onlyInvalidateTo) {\n          var progressTmp = this.tween.progress();\n          this.tween\n            .progress(0)\n            .invalidate()\n            .progress(progressTmp);\n        } else {\n          this.tween.invalidate();\n        }\n      }\n      // is Timeline\n      // TODO: not yet ready\n      else {\n        let delay = 0;\n        this.tween.getChildren(false, true, false).forEach((tween: any) => {\n          tween.vars = { ...to, ...vars, ...{ delay } };\n          tween.invalidate();\n          // delay += stagger || 0;\n        });\n      }\n\n      if (!this.tween.paused()) {\n        this.tween.restart();\n      }\n    }\n\n    setPlayState(playState, prevProps.playState, this.tween);\n  }\n\n  createTween() {\n    if (this.tween) {\n      this.tween.kill();\n    }\n\n    if (this.props.children) {\n      this.tween = getTweenFunction(this.targets, this.props);\n    } else {\n      // why this is needed?\n      this.tween = () => {};\n    }\n\n    this.context.registerConsumer(this);\n  }\n\n  getGSAP() {\n    return this.tween;\n  }\n\n  setGSAP(tween: any) {\n    this.tween = tween;\n  }\n\n  addTarget(target: any) {\n    // target is null at unmount\n    if (target !== null) {\n      this.targets.push(target);\n    }\n  }\n\n  getTargets() {\n    return this.targets;\n  }\n\n  render() {\n    let { children, wrapper } = this.props;\n\n    const output = (\n      <Fragment>\n        {React.Children.map(children, child =>\n          React.cloneElement(child as any, {\n            [refOrInnerRef(child)]: (target: any) => this.addTarget(target),\n          })\n        )}\n      </Fragment>\n    );\n\n    if (wrapper) {\n      return React.cloneElement(wrapper, [], output);\n    }\n\n    return output;\n  }\n}\n\nexport default Tween;\n","import React, { Fragment, ReactNode, ReactElement, forwardRef } from 'react';\nimport { gsap } from 'gsap';\nimport { isForwardRef, isFragment } from 'react-is';\nimport { PlayState } from './types';\nimport { getTweenFunction, setPlayState, refOrInnerRef, nullishCoalescing } from './helper';\nimport Provider, { Context } from './Provider';\nimport { TweenProps } from './Tween';\n\ntype Label = {\n  label: string;\n  position: string | number;\n};\n\nexport type Targets = Map<string | number, ReactElement | ReactElement[]>;\nexport type TargetsRef = {\n  set: (key: string, target: any) => void;\n};\n\nexport type Target = ReactElement | null;\n\nexport type TimelineProps = {\n  children: ReactNode;\n  wrapper?: ReactElement;\n  target?: Target;\n  position?: string | number;\n  labels?: Label[];\n\n  duration?: number;\n  progress?: number;\n  totalProgress?: number;\n  playState?: PlayState;\n\n  [prop: string]: any;\n};\n\nclass Timeline extends Provider<TimelineProps> {\n  static displayName = 'Timeline';\n  static contextType = Context;\n\n  timeline: any;\n  targets: Targets = new Map();\n\n  constructor(props: TimelineProps) {\n    super(props);\n\n    this.setTarget = this.setTarget.bind(this);\n  }\n\n  setPlayState(playState: PlayState) {\n    const { playState: previousPlayState } = this.props;\n    setPlayState(playState, previousPlayState, this.timeline);\n  }\n\n  componentDidMount() {\n    this.createTimeline();\n  }\n\n  componentWillUnmount() {\n    this.timeline.kill();\n  }\n\n  getSnapshotBeforeUpdate() {\n    this.targets = new Map();\n    return null;\n  }\n\n  componentDidUpdate(prevProps: TimelineProps) {\n    const { children, duration, progress, totalProgress, playState } = this.props;\n\n    // if children change create a new timeline\n    // TODO: replace easy length check with fast equal check\n    // TODO: same for props.target?\n    if (React.Children.count(prevProps.children) !== React.Children.count(children)) {\n      this.createTimeline();\n    }\n\n    // execute function calls\n    if (progress !== prevProps.progress) {\n      this.timeline.progress(progress);\n    }\n    if (totalProgress !== prevProps.totalProgress) {\n      this.timeline.totalProgress(totalProgress);\n    }\n    if (duration !== prevProps.duration) {\n      this.timeline.duration(duration);\n    }\n\n    setPlayState(playState, prevProps.playState, this.timeline);\n  }\n\n  createTimeline() {\n    const {\n      children,\n      target,\n      duration,\n      progress,\n      totalProgress,\n      playState,\n      labels,\n      position,\n      ...vars\n    } = this.props;\n\n    if (this.timeline) {\n      this.timeline.kill();\n    }\n\n    // init timeline\n    this.timeline = gsap.timeline({\n      smoothChildTiming: true,\n      ...vars,\n    });\n\n    if (labels) {\n      labels.forEach(label => {\n        this.timeline.addLabel(label.label, label.position);\n      });\n    }\n\n    // add tweens or nested timelines to timeline\n    this.consumers.forEach(consumer => {\n      if (consumer.tween && !consumer.props.children) {\n        const { position, target, stagger, ...vars } = consumer.props as TweenProps;\n\n        // get target if not nullish\n        let targets = null;\n        if (target !== null && typeof target !== 'undefined') {\n          targets = this.targets.get(target);\n        }\n\n        const tween = getTweenFunction(\n          // @ts-ignore\n          nullishCoalescing(targets, Array.from(this.targets.values())),\n          {\n            stagger,\n            ...vars,\n          }\n        );\n        this.timeline.add(tween, nullishCoalescing(position, '+=0'));\n        consumer.setGSAP(tween);\n      } else {\n        const { position } = consumer.props;\n        this.timeline.add(consumer.getGSAP(), nullishCoalescing(position, '+=0'));\n      }\n    });\n\n    // props at mount\n    if (duration) {\n      this.timeline.duration(duration);\n    }\n    if (progress) {\n      this.timeline.progress(progress);\n    }\n    if (totalProgress) {\n      this.timeline.totalProgress(totalProgress);\n    }\n    if (playState) {\n      this.setPlayState(playState);\n    }\n\n    this.context.registerConsumer(this);\n  }\n\n  getGSAP() {\n    return this.timeline;\n  }\n\n  addTarget(target: any) {\n    if (target !== null) {\n      this.targets.set(this.targets.size, target);\n    }\n  }\n\n  setTarget(key: string, target: any) {\n    if (target !== null) {\n      if (this.targets.has(key)) {\n        const targets = this.targets.get(key);\n        if (Array.isArray(targets)) {\n          this.targets.set(key, [...targets, ...target]);\n          return;\n        }\n      }\n      this.targets.set(key, target);\n    }\n  }\n\n  setTargets(targets: Targets) {\n    this.targets = targets;\n  }\n\n  getTargets() {\n    return this.targets;\n  }\n\n  cloneElement(child: any) {\n    return React.cloneElement(child, {\n      // @ts-ignore\n      [refOrInnerRef(child)]: target => this.addTarget(target),\n    });\n  }\n\n  renderTarget(target?: Target): ReactNode {\n    if (!target) {\n      return null;\n    }\n\n    // if is forwardRef clone and pass targets as ref\n    if (isForwardRef(target)) {\n      return <target.type ref={{ set: this.setTarget }} />;\n    }\n\n    // else iterate the first level of children and set targets\n    return (\n      <Fragment>\n        {/* First render the target */}\n        {React.Children.map<ReactElement, ReactElement>(target, child => {\n          if (isFragment(child)) {\n            return React.Children.map(child.props.children, fragmentChild => {\n              return this.cloneElement(fragmentChild);\n            });\n          }\n          return this.cloneElement(child);\n        })}\n      </Fragment>\n    );\n  }\n\n  render() {\n    let { target, children, wrapper } = this.props;\n\n    const renderedTarget = this.renderTarget(target);\n\n    let output = (\n      <Fragment>\n        {renderedTarget}\n        {children}\n      </Fragment>\n    );\n\n    if (wrapper) {\n      output = React.cloneElement(wrapper, [], output);\n    }\n\n    return this.renderWithProvider(output);\n  }\n}\n\nexport default Timeline;\n","import React from 'react';\nimport { gsap } from 'gsap';\nimport { nullishCoalescing } from '../helper';\nimport Provider from '../Provider';\n\nexport type RevealProps = {\n  children: React.ReactNode;\n  trigger: React.ReactElement | null;\n  repeat: boolean;\n  root: Element | null;\n  rootMargin: string;\n  threshold: number;\n};\n\nenum EntryState {\n  unknown,\n  entered,\n  exited,\n}\n\nclass Reveal extends Provider<RevealProps> {\n  static displayName = 'Reveal';\n\n  static defaultProps = {\n    trigger: null,\n    repeat: false,\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.66,\n  };\n\n  timeline: any;\n  triggerRef: HTMLElement | null = null;\n  observer: IntersectionObserver | null = null;\n\n  init() {\n    this.createTimeline();\n    this.createIntersectionObserver();\n  }\n\n  kill() {\n    this.killTimeline();\n    this.killIntersectionObserver();\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentWillUnmount() {\n    this.kill();\n  }\n\n  componentDidUpdate(prevProps: RevealProps) {\n    const { children, trigger } = this.props;\n\n    // if children change create a new timeline\n    // TODO: replace easy length check with fast equal check\n    // TODO: same for props.target?\n    if (React.Children.count(prevProps.children) !== React.Children.count(children)) {\n      this.init();\n    }\n\n    if (prevProps.trigger !== trigger) {\n      this.init();\n    }\n  }\n\n  createTimeline() {\n    this.killTimeline();\n\n    // init timeline\n    this.timeline = gsap.timeline({\n      smoothChildTiming: true,\n      paused: true,\n    });\n\n    // add consumers\n    this.consumers.forEach(consumer => {\n      const { position } = consumer.props;\n      this.timeline.add(consumer.getGSAP().play(), nullishCoalescing(position, 0));\n    });\n  }\n\n  killTimeline() {\n    if (this.timeline) {\n      this.timeline.kill();\n    }\n  }\n\n  createIntersectionObserver() {\n    let { root, rootMargin, threshold } = this.props;\n\n    const options = {\n      root,\n      rootMargin,\n      threshold: [0, threshold],\n    };\n\n    this.observer = new IntersectionObserver(this.intersectionObserverCallback, options);\n\n    // It would be better if we wouldn't need an extra wrapper.\n    // But it can be problematic for example with a fadeInLeft animation\n    // were the element is out of the viewport in the initial state.\n    // In this case there wouldn't be an intersection..\n    if (!this.triggerRef) {\n      this.consumers.forEach(consumer => {\n        consumer.getTargets().forEach((target: any) => {\n          this.observer && this.observer.observe(target);\n        });\n      });\n    } else {\n      this.observer && this.observer.observe(this.triggerRef);\n    }\n  }\n\n  killIntersectionObserver() {\n    this.unobserveAll();\n    this.observer = null;\n  }\n\n  unobserveAll() {\n    if (this.observer) {\n      if (!this.triggerRef) {\n        this.consumers.forEach(consumer => {\n          consumer.getTargets().forEach((target: any) => {\n            this.observer && this.observer.unobserve(target);\n          });\n        });\n      } else {\n        this.observer && this.observer.unobserve(this.triggerRef);\n      }\n    }\n  }\n\n  intersectionObserverCallback = (entries: any) => {\n    let { repeat, threshold } = this.props;\n    let state: EntryState = EntryState.unknown;\n\n    for (const entry of entries) {\n      if (entry.isIntersecting && entry.intersectionRatio >= threshold) {\n        this.timeline.play();\n        state = EntryState.entered;\n        break;\n      } else if (!entry.isIntersecting) {\n        state = EntryState.exited;\n        break;\n      }\n    }\n\n    if (!repeat && state === EntryState.entered) {\n      this.killIntersectionObserver();\n    } else if (repeat && state === EntryState.exited) {\n      this.timeline.pause(0);\n    }\n  };\n\n  getGSAP() {\n    return this.timeline;\n  }\n\n  render() {\n    let { children, trigger } = this.props;\n\n    let output = trigger ? (\n      <trigger.type {...trigger.props} ref={(trigger: HTMLElement) => (this.triggerRef = trigger)}>\n        {children}\n      </trigger.type>\n    ) : (\n      children\n    );\n\n    return this.renderWithProvider(output);\n  }\n}\n\nexport default Reveal;\n","import React from 'react';\n\ntype SplitWordsProps = {\n  children: React.ReactNode;\n  wrapper: React.ReactElement;\n  delimiter?: string;\n};\n\ntype SplitCharsProps = {\n  children: React.ReactNode;\n  wrapper: React.ReactElement;\n};\n\nconst escapeRegExp = (regExp: string) => {\n  var specialChars = ['$', '^', '*', '(', ')', '+', '[', ']', '{', '}', '\\\\', '|', '.', '?', '/'];\n  var regex = new RegExp('(\\\\' + specialChars.join('|\\\\') + ')', 'g');\n  return regExp.replace(regex, '\\\\$1');\n};\n\nexport const SplitWords = React.forwardRef<any, SplitWordsProps>(\n  ({ children, wrapper, delimiter = ' ' }, ref) => {\n    if (typeof children !== 'string') {\n      throw new Error('SplitWords only accepts a string as child.');\n    }\n    const words = children.split(new RegExp(`(${escapeRegExp(delimiter)})`, 'g'));\n    return (\n      <>\n        {words.map((word: string, i: number) => {\n          if (delimiter === ' ' && word === delimiter) {\n            return <React.Fragment key={i}> </React.Fragment>;\n          }\n          return React.cloneElement(wrapper, { ref, key: i }, word);\n        })}\n      </>\n    );\n  }\n);\n\nexport const SplitChars = React.forwardRef<any, SplitCharsProps>(({ children, wrapper }, ref) => {\n  if (typeof children !== 'string') {\n    throw new Error('SplitLetters only accepts a string as child.');\n  }\n  return (\n    <>\n      {children\n        .split(\n          /(?=(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))/\n        )\n        .map((char: string, i: number) => {\n          // TODO: enhance check for space\n          if (char === ' ') {\n            return <React.Fragment key={i}> </React.Fragment>;\n          }\n          return React.cloneElement(wrapper, { ref, key: i }, char);\n        })}\n    </>\n  );\n});\n\nexport const SplitLetters = React.forwardRef((props: any, ref) => {\n  console.log('Deprecation warning: Use SplitChars instead of SplitLetters');\n  return <SplitChars {...props} ref={ref} />;\n});\n","import React from 'react';\nimport { PlayState } from './../types';\nimport { setPlayState } from './../helper';\nimport Provider from '../Provider';\n\ntype ControlsProps = {\n  playState?: PlayState;\n};\n\ntype ControlsState = {\n  totalProgress: number;\n  playState?: PlayState;\n  prevPlayState?: PlayState;\n};\n\nclass Controls extends Provider<ControlsProps, ControlsState> {\n  gsap: any;\n  slider: any;\n  sliderTouched: boolean = false;\n\n  state = {\n    totalProgress: 0,\n    playState: undefined,\n    prevPlayState: undefined,\n  };\n\n  containerStyle = {\n    backgroundColor: '#f0f0f0',\n    padding: '10px 10px 0 10px',\n    marginTop: '10px',\n    position: 'relative' as 'relative',\n    zIndex: 2,\n    fontFamily: 'verdana, sans-serif',\n    fontSize: '16px',\n    border: '1px solid #ccc',\n  };\n\n  buttonContainerStyle = {\n    margin: '0',\n    display: 'flex',\n    flexWrap: 'wrap' as 'wrap',\n    justifyContent: 'space-between',\n  };\n\n  buttonStyle = {\n    border: '1px solid #999',\n    backgroundColor: '#f0f0f0',\n    padding: '5px',\n    margin: '10px 10px 10px 0',\n    cursor: 'pointer',\n  };\n\n  sliderStyle = {\n    margin: '0',\n    width: '100%',\n  };\n\n  playStateStyle = {\n    color: '#999',\n    margin: '10px 0',\n    fontSize: '14px',\n  };\n\n  componentDidMount() {\n    if (this.consumers.length) {\n      this.gsap = this.consumers[0];\n\n      const gsap = this.gsap.getGSAP();\n\n      if (gsap) {\n        gsap.eventCallback('onUpdate', this.onUpdate);\n\n        if (this.props.playState) {\n          this.setPlayState(this.props.playState);\n        } else {\n          // get child initial state\n          if (gsap.paused()) {\n            this.setPlayState(PlayState.pause);\n          } else if (gsap.reversed()) {\n            this.setPlayState(PlayState.reverse);\n          } else {\n            this.setPlayState(PlayState.play);\n          }\n        }\n\n        const totalProgress = gsap.totalProgress();\n        this.slider.value = totalProgress * 100;\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    this.onUpdate();\n  }\n\n  onUpdate = () => {\n    if (this.gsap && this.slider && !this.sliderTouched) {\n      const totalProgress = this.gsap.getGSAP().totalProgress();\n      this.slider.value = totalProgress * 100;\n    }\n  };\n\n  onChange = (event: any) => {\n    if (this.gsap && this.gsap.getGSAP()) {\n      this.gsap.getGSAP().totalProgress(event.target.value / 100);\n    }\n  };\n\n  setPlayState = (state: PlayState) => {\n    this.setState(prevState => {\n      return {\n        playState: state,\n        prevPlayState: prevState.playState,\n      };\n    });\n  };\n\n  getControls = (_totalProgress: any, playState: PlayState | undefined) => (\n    <div style={this.containerStyle}>\n      <input\n        ref={el => (this.slider = el)}\n        type=\"range\"\n        style={this.sliderStyle}\n        step=\"0.001\"\n        onChange={e => this.onChange(e)}\n        onMouseDown={() => (this.sliderTouched = true)}\n        onMouseUp={() => (this.sliderTouched = false)}\n      />\n      <div style={this.buttonContainerStyle}>\n        <div>\n          <button\n            type=\"button\"\n            style={this.buttonStyle}\n            onClick={() => this.setPlayState(PlayState.play)}\n          >\n            Play\n          </button>\n          <button\n            type=\"button\"\n            style={this.buttonStyle}\n            onClick={() => this.setPlayState(PlayState.reverse)}\n          >\n            Reverse\n          </button>\n          <button\n            type=\"button\"\n            style={this.buttonStyle}\n            onClick={() => this.setPlayState(PlayState.pause)}\n          >\n            Pause\n          </button>\n          <button\n            type=\"button\"\n            style={this.buttonStyle}\n            onClick={() => this.setPlayState(PlayState.stop)}\n          >\n            Stop\n          </button>\n        </div>\n        <span style={this.playStateStyle}>{playState}</span>\n      </div>\n    </div>\n  );\n\n  render() {\n    const { children } = this.props;\n    const { totalProgress, playState, prevPlayState } = this.state;\n\n    if (this.gsap) {\n      setPlayState(playState, prevPlayState, this.gsap.getGSAP());\n    }\n\n    return this.renderWithProvider(\n      <div>\n        {children}\n        {this.getControls(totalProgress, playState)}\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n"]},"metadata":{},"sourceType":"module"}