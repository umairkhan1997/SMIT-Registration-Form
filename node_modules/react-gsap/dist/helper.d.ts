import { gsap } from 'gsap';
import { PlayState } from './types';
declare const setPlayState: (playState?: PlayState | undefined, prevPlayState?: PlayState | null | undefined, tween?: any) => void;
declare const getTweenFunction: (targets: any, props: any) => gsap.core.Tween | gsap.core.Timeline;
declare const callTweenFunction: (tweenFunction: any, functionName: string, params?: Array<any> | undefined, returnFunction?: string | undefined) => void;
declare const isEqual: (obj1: any, obj2: any) => boolean;
declare const refOrInnerRef: (child: any) => "ref" | "innerRef";
declare const getRefProp: (child: any, addTarget: (target: any) => void) => {
    innerRef: (target: any) => void;
    ref?: undefined;
} | {
    ref: (target: any) => void;
    innerRef?: undefined;
};
declare const getTargetRefProp: (child: any, setTarget: (key: string, target: any) => void) => {
    ref: {
        set: (key: string, target: any) => void;
    };
};
declare const nullishCoalescing: <T, R>(value: T, ifNullish: R) => T | R;
export { getTweenFunction, callTweenFunction, setPlayState, isEqual, refOrInnerRef, getRefProp, getTargetRefProp, nullishCoalescing, };
